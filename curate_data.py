import json
import re
import os

# --- 1. CONFIGURATION ---

# The raw data file generated by your collection script
INPUT_FILE = os.path.join("data", "qa_data.json")

# The new file where the cleaned data will be saved
OUTPUT_FILE = os.path.join("data", "qa_data_cleaned.json")

# A list of common fluff phrases to remove from answers.
# This is a safe operation that just removes conversational noise.
FLUFF_PHRASES = [
    r"(?i)hope this helps",
    r"(?i)further reading",
    r"(?i)as others have said",
    r"(?i)you can read more",
    r"(?i)this worked for me",
    r"(?i)it's almost always a bad idea",
    r"(?i)you should understand the implications",
    r"(?i)thanks in advance",
    r"what is the head in git\?",
    r"(?i)executive summary",
]


# --- 2. THE NON-DESTRUCTIVE CLEANING FUNCTION ---

def format_entry(raw_entry):
    """
    This function ONLY formats the text and removes metadata.
    It does NOT delete any entries.
    """

    # --- A. Clean the "instruction" ---
    # Safely removes text like [duplicate] from the question.
    instruction = re.sub(r'(?i)\[(duplicate|closed|on hold)\]', '', raw_entry['instruction']).strip()

    # --- B. Clean the "response" ---
    response = raw_entry['response']

    # Remove all the common fluff phrases
    for phrase in FLUFF_PHRASES:
        response = re.sub(phrase, '', response)

    # Collapse any sequence of 3 or more newlines into just two
    response = re.sub(r'\n{3,}', '\n\n', response).strip()

    # --- C. Create the Final, Clean Object ---
    # This dictionary only has the keys the model needs.
    # All metadata like "question_score", "tags", etc., is removed.
    clean_entry = {
        "instruction": instruction,
        "response": response
    }

    return clean_entry


# --- 3. MAIN EXECUTION ---
if __name__ == "__main__":
    print(f"Loading raw data from {INPUT_FILE}...")
    try:
        with open(INPUT_FILE, "r", encoding="utf-8") as f:
            raw_data = json.load(f)
    except FileNotFoundError:
        print(f"ERROR: Input file not found at {INPUT_FILE}. Please ensure it exists.")
        exit()

    print(f"Found {len(raw_data)} entries. Starting non-destructive cleaning...")

    cleaned_data = []

    for i, entry in enumerate(raw_data):
        try:
            # We will process every single entry without discarding any.
            if isinstance(entry, dict) and 'instruction' in entry and 'response' in entry:
                formatted = format_entry(entry)
                cleaned_data.append(formatted)
            else:
                print(f"  - WARNING: Skipping invalid entry at index {i} (missing required keys).")
        except Exception as e:
            print(f"  - ERROR: Could not process entry at index {i}. Reason: {e}")

    print(f"\nFormatting complete. Processed {len(cleaned_data)} entries.")

    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        json.dump(cleaned_data, f, indent=2, ensure_ascii=False)

    print(f"\nSuccessfully saved formatted data to '{OUTPUT_FILE}'")
    print("\nIMPORTANT: Your new file contains ALL your original entries, just cleaned up.")
    print("Your next step is to manually review this full list and delete bad pairs yourself.")